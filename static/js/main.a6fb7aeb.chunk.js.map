{"version":3,"sources":["TokenScript/Authenticator.js","TokenScript/Negotiator.js","LogoCard/index.js","DatePicker/index.js","Card/index.js","BookingModal/index.js","RoomCard/index.js","App.js","reportWebVitals.js","index.js","Attestation/SignedDevonTicket.js","Attestation/PublicKeyInfo.js","Attestation/AlgorithmIdentifier.js"],"names":["Authenticator","getAuthenticationBlob","a","ticket","btoa","ticketId","fetchChallenge","fetch","method","headers","then","response","json","data","value","catch","error","console","signChallenge","useTicketProof","challenge","atob","sendChallenge","signedMsg","assetOwnerAddress","findOwner","Negotiator","filter","this","urlParams","URLSearchParams","window","location","search","ticketFromQuery","get","secretFromQuery","storageTickets","localStorage","getItem","ticketObject","ticketDecodedString","SignedDevconTicket","ticketClass","isValidTicket","devconId","tickets","raw","web","isNewQueryTicket","length","JSON","parse","map","ticketBlob","storedTicketObject","push","secret","setItem","stringify","MediaCard","title","Card","className","CardContent","Typography","gutterBottom","variant","component","MaterialUIPickers","React","useState","Date","selectedDate","setSelectedDate","utils","DateFnsUtils","Grid","container","justify","disableToolbar","format","margin","id","label","onChange","date","KeyboardButtonProps","useStyles","makeStyles","root","maxWidth","media","height","tokenInstance","applyDiscount","classes","CardActionArea","CardMedia","image","onClick","e","toString","color","FormDialog","roomType","discountApplied","price","tokens","open","setOpen","handleClose","Button","size","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","type","fullWidth","token","index","DialogActions","room","discountPrice","frequency","style","textDecoration","CardActions","App","setTokens","useEffect","setDiscountApplied","setValidatedDiscount","document","addEventListener","detail","sentChallenge","LogoCard","dangerouslySetInnerHTML","__html","roomTypesData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","DevconTicket","source","TypeError","ArrayBuffer","asn1","fromBER","fromSchema","result","getParametersValue","schema","clearProps","compareSchema","verified","Error","valueBlock","_valueHex","BigInt","bufferToHexCodes","parameters","names","Sequence","name","blockName","Integer","ticketEncoded","startsWith","URL","searchParams","base64str","split","join","Buffer","Uint8Array","from","buffer","c","charCodeAt","commitment","publicKeyInfo","PublicKeyInfo","signatureValue","valueBeforeDecode","valueHex","OctetString","optional","BitString","signatureAlgorithm","publicKey","AlgorithmIdentifier","algorithmId","algorithmParams","defaultValues","algorithmIdentifier","algorithm","params","outputArray","ObjectIdentifier","asn1js","Any","object","toJSON","memberName","memberValue"],"mappings":"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","file":"static/js/main.a6fb7aeb.chunk.js","sourcesContent":["export const Authenticator = {\r\n  getAuthenticationBlob: async ({ ticket }) => {\r\n    return btoa(ticket.ticketId);\r\n  },\r\n  fetchChallenge: async () => {\r\n    return fetch('./Authentication/getChallenge.json',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        return data.value;\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  },\r\n  signChallenge: async ({ useTicketProof, challenge }) => {\r\n    return `{challenge: ${challenge}, proof: ${atob(useTicketProof)}}`;\r\n  },\r\n  sendChallenge: async ({ signedMsg }) => {\r\n    return fetch('./Authentication/validChallenge.json', {\r\n      method: 'GET', // POST for actual app (can't use POST in this simple mock example)\r\n      // body: signedMsg // body used for actual app (can't use POST in this simple mock example)\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        return data.value;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n      });\r\n  },\r\n  assetOwnerAddress: async () => { }, // return; to confirm the function of this\r\n  findOwner: async () => { }, // return ownerAddress\r\n}\r\n","// https://github.com/TokenScript/attestation/blob/main/src/main/javascript/SignedDevonTicket.js\r\nimport { SignedDevconTicket } from './../Attestation/SignedDevonTicket';\r\n\r\nexport class Negotiator {\r\n  constructor(filter) {\r\n    this.filter = filter;\r\n  }\r\n\r\n  // Modal / Auto Attestation\r\n  async negotiate() {\r\n    return true;\r\n  }\r\n\r\n  // Get the token instances (with filter)\r\n  async getTokenInstances() {\r\n    // Get ticket from params - to add to local storage / read into app\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const ticketFromQuery = urlParams.get('ticket');\r\n    const secretFromQuery = urlParams.get('secret');\r\n    // Get the current Storage Tokens (DER format)\r\n    const storageTickets = localStorage.getItem('dcTokens');\r\n    // Decode the current ticket (DER format)\r\n    // root object { commitment, publicKeyInfo, signatureValue, ticket } \r\n    // ticket example: \"SignedDevconTicket{ticket: DevconTicket {devconId: 6n,ticketId: 417541561855n,ticketClass: 0n},commitment: ArrayBuffer {[Uint8Contents]: <04 12 35 64 9d 5b fd 29 fe c5 d8 5b 6d e9 05 4e dc 8d 36 79 16 9d 88 4d 64 27 a9 2f af dd f8 fd 30 29 38 b6 71 ae 1e 46 2f 78 cb a0 4c fd 26 fe 36 16 ca 4f bf f2 c7 15 ae 8c f4 06 8e b8 b0 2f 22>,byteLength: 65},publicKeyInfo: PublicKeyInfo { signatureAlgorithm: undefined, publicKey: undefined },signatureValue: ArrayBuffer {[Uint8Contents]: <30 44 02 20 70 2c af bd e4 d3 d9 a3 45 b4 d4 70 c1 7f 26 62 b1 9d 8a 68 da f3 a1 6b b1 45 5f e7 86 31 8b 30 02 20 68 e3 f8 79 55 48 34 7e 71 33 c0 af f4 e5 43 77 23 86 dc 1c 54 ab 23 d5 40 eb 83 53 d3 da 0b da>,byteLength: 70}}'\";\r\n    let ticketDecodedString;\r\n    let ticketObject = {};\r\n    if (ticketFromQuery) {\r\n      ticketDecodedString = new SignedDevconTicket(ticketFromQuery);\r\n      // Read from Decoded ticket String\r\n      ticketObject = ticketDecodedString.ticket;\r\n    }\r\n    // Check if the ticket is valid (has data)\r\n    const isValidTicket = (\r\n      ticketObject.ticketId,\r\n      ticketObject.ticketClass,\r\n      ticketObject.devconId\r\n    );\r\n    // Tickets for storage (raw) and for web view\r\n    const tickets = {\r\n      raw: [],\r\n      web: []\r\n    };\r\n    // If Valid, return web friendly tickets\r\n    if (isValidTicket) {\r\n      // Check if its new or an existing ticket id:\r\n      // If the ticket from the query is new / or to replace an existing ticket\r\n      let isNewQueryTicket = true;\r\n      if (storageTickets && storageTickets.length) {\r\n        // Build new list of tickets from current and query ticket { ticket, secret }\r\n        JSON.parse(storageTickets).map((ticketBlob) => {\r\n          // Decoded string to JS Object\r\n          const storedTicketObject = new SignedDevconTicket(ticketBlob.ticket);\r\n          // If the same as a previous ticket - replace with the new ticket\r\n          if (storedTicketObject.ticket.ticketId == ticketObject.ticketId) {\r\n            // If new push the DER of the ticket into localstorage\r\n            tickets.raw.push({ ticket: ticketFromQuery, secret: secretFromQuery });\r\n            // Push a js object\r\n            tickets.web.push({\r\n              devconId: ticketObject.devconId,\r\n              ticketId: ticketObject.ticketId,\r\n              ticketClass: ticketObject.ticketClass\r\n            });\r\n            isNewQueryTicket = false;\r\n          } else {\r\n            // Else push the original DER - Check this is correct.\r\n            tickets.raw.push(ticketBlob); // contains the ticket and secret\r\n            tickets.web.push({\r\n              devconId: storedTicketObject.ticket.devconId,\r\n              ticketId: storedTicketObject.ticket.ticketId,\r\n              ticketClass: storedTicketObject.ticket.ticketClass\r\n            });\r\n          }\r\n        });\r\n      }\r\n      // Add ticket if new\r\n      if (isNewQueryTicket) {\r\n        tickets.raw.push({ ticket: ticketFromQuery, secret: secretFromQuery }); // new raw object\r\n        tickets.web.push({\r\n          devconId: ticketObject.devconId,\r\n          ticketId: ticketObject.ticketId,\r\n          ticketClass: ticketObject.ticketClass\r\n        });\r\n      }\r\n      // Set New tokens list raw only, websters will be decoded each time\r\n      localStorage.setItem('dcTokens', JSON.stringify(tickets.raw));\r\n    } else { // no ticket in browser window, search for localstorage items\r\n      if (storageTickets && storageTickets.length) {\r\n        JSON.parse(storageTickets).map((ticketBlob) => {\r\n          // Decoded string to JS Object\r\n          const storedTicketObject = new SignedDevconTicket(ticketBlob.ticket);\r\n          // Push the original DER\r\n          tickets.raw.push(ticketBlob);\r\n          tickets.web.push({\r\n            devconId: storedTicketObject.ticket.devconId,\r\n            ticketId: storedTicketObject.ticket.ticketId,\r\n            ticketClass: storedTicketObject.ticket.ticketClass\r\n          });\r\n        });\r\n      }\r\n    }\r\n    // Return tickets for web\r\n    return tickets.web;\r\n  }\r\n\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './logoCard.css';\r\n\r\nfunction MediaCard({ title }) {\r\n  return (\r\n    <Card className=\"logoCard\">\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h1\" component=\"h1\">\r\n          {title}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default MediaCard;\r\n\r\n","\r\n\r\nimport 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nexport default function MaterialUIPickers() {\r\n  // The first commit of Material-UI\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2021-04-10T21:11:54'));\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n        <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"dd/mm/yyyy\"\r\n          margin=\"normal\"\r\n          id=\"date-picker-inline\"\r\n          label=\"Date picker inline\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n        {/* <KeyboardDatePicker\r\n          margin=\"normal\"\r\n          id=\"date-picker-dialog\"\r\n          label=\"Date picker dialog\"\r\n          format=\"MM/dd/yyyy\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n        <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Time picker\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}\r\n        /> */}\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n\r\n// import React from 'react';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import TextField from '@material-ui/core/TextField';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   container: {\r\n//     display: 'flex',\r\n//     flexWrap: 'wrap',\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 200,\r\n//   },\r\n// }));\r\n\r\n// export default function DatePickers() {\r\n//   const classes = useStyles();\r\n\r\n//   return (\r\n//     <form className={classes.container} noValidate>\r\n//       <TextField\r\n//         id=\"date\"\r\n//         label=\"Booking\"\r\n//         type=\"date\"\r\n//         defaultValue=\"2017-05-24\"\r\n//         className={classes.textField}\r\n//         InputLabelProps={{\r\n//           shrink: true,\r\n//         }}\r\n//       />\r\n//     </form>\r\n//   );\r\n// }","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport './Card.css';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 3,\r\n  },\r\n});\r\n\r\nfunction MediaCard({ tokenInstance, applyDiscount }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className=\"card\">\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image=\"./mock.png\"\r\n          title=\"token\"\r\n        />\r\n        <CardContent onClick={e => applyDiscount(tokenInstance)}>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {tokenInstance.ticketClass.toString()}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Ticket Id: {tokenInstance.ticketId.toString()}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Devcon Id: {tokenInstance.devconId.toString()}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default MediaCard;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DatePicker from './../DatePicker';\r\nimport Card from './../Card';\r\n\r\nexport default function FormDialog({ roomType, applyDiscount, discountApplied, price, tokens }) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button size=\"small\" color=\"primary\" onClick={handleClickOpen}>\r\n        Book\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{roomType}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>{discountApplied ? 'Special discount' : 'Standard'} price of {price} ETH per night.</DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"booking-name\"\r\n            label=\"Booking Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n          />\r\n          <DatePicker />\r\n          <p>Select a ticket:</p>\r\n          {tokens &&\r\n            tokens.map((token, index) => {\r\n              return <Card key={index} applyDiscount={applyDiscount} tokenInstance={token}></Card>\r\n            })\r\n          }\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Verify Ticket\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport BookingModal from './../BookingModal';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './RoomCard.css';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n    margin: \"20px\"\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nexport default function MediaCard({ room, applyDiscount, discountApplied, tokens }) {\r\n  const classes = useStyles();\r\n  const { type, price, discountPrice, image, frequency } = room;\r\n  return (\r\n    <Card className=\"roomCard\">\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={image}\r\n          title=\"token\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {type}\r\n          </Typography>\r\n          {discountApplied === false &&\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {price} ETH / {frequency}\r\n            </Typography>\r\n          }\r\n          {discountApplied === true &&\r\n            <div>\r\n              <Typography style={{ textDecoration: \"line-through\" }} variant=\"body2\" color=\"textSecondary\" component=\"span\">\r\n                {price} ETH\r\n              </Typography>\r\n              <span> </span>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\r\n                ${discountPrice} ETH / {frequency}\r\n              </Typography>\r\n            </div>\r\n          }\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <BookingModal applyDiscount={applyDiscount} tokens={tokens} roomType={type} discountApplied={discountApplied} price={discountApplied ? discountPrice : price} />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","// import Web3 from 'web3';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Negotiator, Authenticator } from './TokenScript';\r\nimport LogoCard from './LogoCard';\r\nimport RoomCard from './RoomCard';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport roomTypesData from './roomTypesDataMock.json';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  // let web3 = new Web3('HTTP://127.0.0.1:7545');\r\n  let [tokens, setTokens] = useState([]);\r\n  useEffect(() => { }, []);\r\n  // Show discount inside web view\r\n  let [discountApplied, setDiscountApplied] = useState(false);\r\n  // Validated discount, this could be sent to the backend etc\r\n  let [validatedDiscount, setValidatedDiscount] = useState(false);\r\n  // 1. User opens website and the negotiator is triggered\r\n  const negotiator = new Negotiator([\"discountTokens\"]);\r\n  // 2. iframe gets the tickets\r\n  const iframe = () => {\r\n    return {\r\n      __html: '<iframe id=\"test\" src=\"./demo.html\" title=\"Iframe\"></iframe>'\r\n    }\r\n  }\r\n  // 3. listen for ticket changes and apply to view on change\r\n  window.document.addEventListener('ticketsRecievedEvent', handleEvent, false)\r\n  function handleEvent(e) {\r\n    setDiscountApplied(true);\r\n    setTokens(e.detail)\r\n  };\r\n  // 4. webster selects to apply discount\r\n  const applyDiscount = async (ticket) => {\r\n    // 5. attestation is triggered\r\n    const useTicketProof = await Authenticator.getAuthenticationBlob({ ticket });\r\n    // 6. get Challenge\r\n    const challenge = await Authenticator.fetchChallenge();\r\n    // 7. sign Challenge useTicketProof, challenge\r\n    const signedMsg = await Authenticator.signChallenge({ useTicketProof, challenge });\r\n    // 8. post signed message\r\n    const sentChallenge = await Authenticator.sendChallenge({ signedMsg });\r\n    // 9. discount can be given to the end user\r\n    setValidatedDiscount(sentChallenge);\r\n  }\r\n  return (\r\n    <div>\r\n      <LogoCard title={\"Hotel Bogota\"} />\r\n      <div className=\"iframeAttestation\" dangerouslySetInnerHTML={iframe()} />\r\n      <div className=\"roomCardsContainer\">\r\n        {roomTypesData.map((room, index) => {\r\n          return <RoomCard key={index} room={room} applyDiscount={applyDiscount} discountApplied={discountApplied} tokens={tokens} />\r\n        })}\r\n      </div>\r\n      {discountApplied &&\r\n        <div>\r\n          {/* <div className=\"ethScale\">\r\n            <div id=\"space\">\r\n              <div className=\"elogo\">\r\n                <div className=\"trif u1\"></div>\r\n                <div className=\"trif u2\"></div>\r\n                <div className=\"trif u3\"></div>\r\n                <div className=\"trif u4\"></div>\r\n                <div className=\"ct\"></div>\r\n                <div className=\"trif l1\"></div>\r\n                <div className=\"trif l4\"></div>\r\n              </div>\r\n            </div>\r\n          </div> */}\r\n          <Typography className=\"applyDiscountCopyContainer\" gutterBottom variant=\"body2\" component=\"p\">\r\n            Devcon discount applied! Enjoy the event.\r\n          </Typography>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {\r\n  BitString,\r\n  compareSchema,\r\n  Integer,\r\n  OctetString,\r\n  Sequence,\r\n  fromBER\r\n} from \"asn1js\";\r\nimport { getParametersValue, clearProps, bufferToHexCodes } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport BigInt from \"big-integer\";\r\n\r\nexport class DevconTicket {\r\n  //**********************************************************************************\r\n  /**\r\n   * Constructor for Attribute class\r\n   * @param {Object} [source={}] source is an object\r\n   * @param {Object} [source:ArrayBuffer] source is DER encoded\r\n   * @param {Object} [source:String]  source is CER encoded\r\n   */\r\n  constructor(source = {}) {\r\n    if (typeof (source) == \"string\") {\r\n      throw new TypeError(\"Unimplemented: Not accepting string yet.\")\r\n    }\r\n    if (source instanceof ArrayBuffer) {\r\n      const asn1 = fromBER(source)\r\n      this.fromSchema(asn1.result);\r\n    } else {\r\n      this.devconId = getParametersValue(\r\n        source,\r\n        \"devconId\"\r\n      );\r\n      this.ticketId = getParametersValue(\r\n        source,\r\n        \"ticketId\"\r\n      );\r\n      this.ticketClass = getParametersValue(\r\n        source,\r\n        \"ticketClass\"\r\n      );\r\n    }\r\n  }\r\n\r\n  static schema(parameters = {}) {\r\n    const names = getParametersValue(parameters, \"names\", {});\r\n\r\n    return new Sequence({\r\n      name: names.blockName || \"ticket\",\r\n      value: [\r\n        new Integer({\r\n          name: names.devconId || \"devconId\",\r\n        }),\r\n        new Integer({\r\n          name: names.ticketId || \"ticketId\",\r\n        }),\r\n        new Integer({\r\n          name: names.ticketClass || \"ticketClass\",\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n\r\n  //**********************************************************************************\r\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\r\n  fromSchema(schema) {\r\n    //region Clear input data first\r\n    clearProps(schema, [\r\n      //   \"ticket\",\r\n      \"devconId\",\r\n      \"ticketId\",\r\n      \"ticketClass\",\r\n    ]);\r\n    //endregion\r\n\r\n    //region Check the schema is valid\r\n    const asn1 = compareSchema(schema, schema, DevconTicket.schema());\r\n\r\n    if (asn1.verified === false)\r\n      throw new Error(\"Object's schema was not verified against input data for DevconTicket\");\r\n\r\n    //endregion\r\n\r\n    //region Get internal properties from parsed schema\r\n    // noinspection JSUnresolvedVariable\r\n\r\n    if (\"devconId\" in asn1.result) {\r\n      const devconId = asn1.result[\"devconId\"].valueBlock._valueHex;\r\n      this.devconId = new BigInt(\"0x\" + bufferToHexCodes(devconId)).value;\r\n    }\r\n\r\n    if (\"ticketId\" in asn1.result) {\r\n      const ticketId = asn1.result[\"ticketId\"].valueBlock._valueHex\r\n      this.ticketId = new BigInt(\"0x\" + bufferToHexCodes(ticketId)).value;\r\n    }\r\n\r\n    if (\"ticketClass\" in asn1.result) {\r\n      const ticketClass = asn1.result[\"ticketClass\"].valueBlock._valueHex;\r\n      this.ticketClass = new BigInt(\"0x\" + bufferToHexCodes(ticketClass)).value;\r\n    }\r\n\r\n    //endregion\r\n  }\r\n}\r\n\r\nexport class SignedDevconTicket {\r\n  //**********************************************************************************\r\n  /**\r\n   * Constructor for Attribute class\r\n   * @param {Object} [source={}] source is an object\r\n   * @param {Object} [source:ArrayBuffer] source is DER encoded\r\n   * @param {Object} [source:String]  source is DER encoded\r\n   */\r\n  constructor(source = {}) {\r\n    if (typeof (source) == \"string\") {\r\n\r\n      const ticketEncoded = (source.startsWith(\"https://\")) ?\r\n        (new URL(source)).searchParams.get('ticket') : source;\r\n\r\n      let base64str = ticketEncoded\r\n        .split('_').join('+')\r\n        .split('-').join('/')\r\n        .split('.').join('=');\r\n\r\n      // source = Uint8Array.from(Buffer.from(base64str, 'base64')).buffer;\r\n      if (typeof Buffer !== 'undefined') {\r\n        source = Uint8Array.from(Buffer.from(base64str, 'base64')).buffer;\r\n      } else {\r\n        source = Uint8Array.from(atob(base64str), c => c.charCodeAt(0)).buffer;\r\n      }\r\n\r\n    }\r\n    if (source instanceof ArrayBuffer) {\r\n      const asn1 = fromBER(source);\r\n      this.fromSchema(asn1.result);\r\n    } else {\r\n      this.ticket = new DevconTicket(source.ticket);\r\n\r\n      this.commitment = getParametersValue(\r\n        source,\r\n        \"commitment\"\r\n      );\r\n\r\n      // TODO: issue #75\r\n      // this.signatureAlgorithm = new AlgorithmIdentifier(source.signatureAlgorithm);\r\n\r\n      this.publicKeyInfo = new PublicKeyInfo(source.publicKeyInfo)\r\n\r\n      this.signatureValue = getParametersValue(\r\n        source,\r\n        \"signatureValue\"\r\n      );\r\n    }\r\n  }\r\n\r\n  //**********************************************************************************\r\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * CertificateList  ::=  SEQUENCE  {\r\n   *    tbsCertList          TBSCertList,\r\n   *    signatureAlgorithm   AlgorithmIdentifier,\r\n   *    signatureValue       BIT STRING  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\r\n  static schema(parameters = {}) {\r\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [signatureAlgorithm]\r\n     * @property {string} [signatureValue]\r\n     */\r\n    const names = getParametersValue(parameters, \"names\", {});\r\n\r\n    return new Sequence({\r\n      name: names.blockName || \"SignedDevconTicket\",\r\n      value: [\r\n        DevconTicket.schema(parameters),\r\n        new OctetString({\r\n          name: \"commitment\",\r\n        }),\r\n        /* PublicKeyInfo is specified in schema here but not appearing in the constructed data object.\r\n         * This is because the underlying AlgorithmIdentifier isn't fully implemented and also\r\n         * that this data is not important for the 1st delivery deadline, won't be read by client anyway.\r\n         * TODO: add support for PublicKeyInfo https://github.com/TokenScript/attestation/issues/75\r\n         */\r\n        new Sequence({\r\n          name: \"publicKeyInfo\",\r\n          optional: true,\r\n          value: [\r\n            PublicKeyInfo.schema(\r\n              names.publicKeyInfo || {\r\n                names: {\r\n                  blockName: \"publicKeyInfo\",\r\n                },\r\n              }\r\n            )\r\n          ]\r\n        }),\r\n\r\n        new BitString({\r\n          name: \"signatureValue\",\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\r\n  fromSchema(schema) {\r\n    //region Clear input data first\r\n    clearProps(schema, [\r\n      //   \"ticket\",\r\n      \"ticket\",\r\n      \"commitment\",\r\n      // TODO: #75\r\n      \"publicKeyInfo\",\r\n      \"signatureValue\",\r\n    ]);\r\n    //endregion\r\n\r\n    //region Check the schema is valid\r\n    const asn1 = compareSchema(schema, schema, SignedDevconTicket.schema());\r\n\r\n    if (asn1.verified === false)\r\n      throw new Error(\"Object's schema was not verified against input data for SignedDevconTicket\");\r\n\r\n    //endregion\r\n\r\n    //region Get internal properties from parsed schema\r\n    // noinspection JSUnresolvedVariable\r\n\r\n    this.ticket = new DevconTicket(asn1.result.ticket.valueBeforeDecode)\r\n\r\n    if (\"commitment\" in asn1.result)\r\n      this.commitment = asn1.result[\"commitment\"].valueBlock.valueHex;\r\n\r\n    // TODO: issue #75\r\n    // this.signatureAlgorithm = new AlgorithmIdentifier(asn1.result.signatureAlgorithm);\r\n    this.publicKeyInfo = new PublicKeyInfo({\r\n      schema: asn1.result.publicKeyInfo,\r\n    });\r\n\r\n    const signatureValue = asn1.result.signatureValue;\r\n    this.signatureValue = signatureValue.valueBlock.valueHex;    //endregion\r\n  }\r\n}","import {\r\n  BitString,\r\n  compareSchema,\r\n  Integer,\r\n  OctetString,\r\n  Sequence,\r\n  fromBER,\r\n  Any,\r\n  ObjectIdentifier\r\n} from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PublicKeyInfo {\r\n  //**********************************************************************************\r\n  /**\r\n   * Constructor for PublicKeyInfo class\r\n   * @param {Object} [source={}]\r\n   * @param {Object} [source.schema] asn1js parsed value to initialize the class from\r\n   * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n   */\r\n  constructor(source = {}) {\r\n    if (typeof(source) == \"string\") {\r\n      throw new TypeError(\"Not accepting string. For base64, convert to ArrayBuffer.\")\r\n    }\r\n    if (source instanceof ArrayBuffer) {\r\n      const asn1 = fromBER(source)\r\n      this.fromSchema(asn1.result);\r\n    } else {\r\n      /**\r\n       * @type {string}\r\n       * @desc ObjectIdentifier for algorithm (string representation)\r\n       */\r\n      this.signatureAlgorithm = getParametersValue(\r\n          source,\r\n          \"signatureAlgorithm\"\r\n      );\r\n\t  this.publicKey = getParametersValue(\r\n          source,\r\n          \"publicKey\"\r\n      );\r\n    }\r\n  }\r\n \r\n  //**********************************************************************************\r\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PublicKeyInfo  ::=  Sequence  {\r\n   *    signatureAlgorithm               AlgorithmIdentifier,\r\n   *    publicKey              BIT-STRING  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\r\n  static schema(parameters = {}) {\r\n    /**\r\n     * @type {Object}\r\n     * @property {string} signatureAlgorithm ObjectIdentifier for the algorithm\r\n     * @property {string} publicKey Any algorithm parameters\r\n     */\r\n    const names = getParametersValue(parameters, \"names\", {});\r\n\r\n    return new Sequence({\r\n      name: names.blockName || \"\",\r\n      optional: true,\r\n      value: [\r\n\t\tAlgorithmIdentifier.schema(\r\n\t\t\tnames.signatureAlgorithm || {\r\n\t\t\t  names: {\r\n\t\t\t\tblockName: \"signatureAlgorithm\",\r\n\t\t\t  },\r\n\t\t\t}\r\n\t\t),\r\n        new BitString({ name: \"publicKey\"}),\r\n      ],\r\n    });\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\r\n  fromSchema(schema) {\r\n    //region Clear input data first\r\n    clearProps(schema, [\"signatureAlgorithm\", \"publicKey\"]);\r\n    //endregion\r\n\r\n    //region Check the schema is valid\r\n    const asn1 = compareSchema(\r\n      schema,\r\n      schema,\r\n      PublicKeyInfo.schema({\r\n        names: {\r\n          signatureAlgorithm: \"signatureAlgorithm\",\r\n          publicKey: \"publicKey\",\r\n        },\r\n      })\r\n    );\r\n\r\n    if (asn1.verified === false)\r\n      throw new Error(\r\n        \"Object's schema was not verified against input data for AlgorithmIdentifier\"\r\n      );\r\n    //endregion\r\n  }\r\n}\r\n//**************************************************************************************\r\n","import { Any, compareSchema, ObjectIdentifier, Sequence } from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier {\r\n  //**********************************************************************************\r\n  /**\r\n   * Constructor for AlgorithmIdentifier class\r\n   * @param {Object} [source={}]\r\n   * @param {Object} [source.schema] asn1js parsed value to initialize the class from\r\n   * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n   */\r\n  constructor(source = {}) {\r\n    if (typeof(source) == \"string\") {\r\n      throw new TypeError(\"Unimplemented: Not accepting string yet.\")\r\n    }\r\n    if (source instanceof ArrayBuffer) {\r\n      const asn1 = fromBER(source)\r\n      this.fromSchema(asn1.result);\r\n    } else {\r\n      /**\r\n       * @type {string}\r\n       * @desc ObjectIdentifier for algorithm (string representation)\r\n       */\r\n      this.algorithmId = getParametersValue(\r\n          source,\r\n          \"algorithmId\"\r\n      );\r\n\r\n      if (\"algorithmParams\" in source)\r\n        /**\r\n         * @type {Object}\r\n         * @desc Any algorithm source\r\n         */\r\n        this.algorithmParams = getParametersValue(\r\n            source,\r\n            \"algorithmParams\",\r\n            AlgorithmIdentifier.defaultValues(\"algorithmParams\")\r\n        );\r\n    }\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\r\n   /* FIXME: algorithmParams is options hence not removed and we need to complete this with all parameters with their default value covered here.\r\n   */\r\n  static defaultValues(memberName) {\r\n    switch (memberName) {\r\n      case \"algorithmParams\":\r\n        return new Any();\r\n      default:\r\n        throw new Error(\r\n          `Invalid member name for AlgorithmIdentifier class: ${memberName}`\r\n        );\r\n    }\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\r\n  static compareWithDefault(memberName, memberValue) {\r\n    switch (memberName) {\r\n      case \"algorithmId\":\r\n        return memberValue === \"\";\r\n      case \"algorithmParams\":\r\n        return memberValue instanceof asn1js.Any;\r\n      default:\r\n        throw new Error(\r\n          `Invalid member name for AlgorithmIdentifier class: ${memberName}`\r\n        );\r\n    }\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AlgorithmIdentifier  ::=  Sequence  {\r\n   *    algorithm               OBJECT IDENTIFIER,\r\n   *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\r\n  static schema(parameters = {}) {\r\n    /**\r\n     * @type {Object}\r\n     * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n     * @property {string} algorithmParams Any algorithm parameters\r\n     */\r\n    const names = getParametersValue(parameters, \"names\", {});\r\n\r\n    return new Sequence({\r\n      name: names.blockName || \"\",\r\n      optional: names.optional || false,\r\n      value: [\r\n        new ObjectIdentifier({ name: names.algorithmIdentifier || \"algorithm\" }),\r\n        new Any({ name: names.algorithmParams || \"parameters\", optional: true }),\r\n      ],\r\n    });\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\r\n  fromSchema(schema) {\r\n    //region Clear input data first\r\n    clearProps(schema, [\"algorithm\", \"params\"]);\r\n    //endregion\r\n\r\n    //region Check the schema is valid\r\n    const asn1 = compareSchema(\r\n      schema,\r\n      schema,\r\n      AlgorithmIdentifier.schema({\r\n        names: {\r\n          algorithmIdentifier: \"algorithm\",\r\n          algorithmParams: \"params\",\r\n        },\r\n      })\r\n    );\r\n\r\n    if (asn1.verified === false)\r\n      throw new Error(\r\n        \"Object's schema was not verified against input data for AlgorithmIdentifier\"\r\n      );\r\n    //endregion\r\n\r\n    //region Get internal properties from parsed schema\r\n    this.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n    if (\"params\" in asn1.result) this.algorithmParams = asn1.result.params;\r\n    //endregion\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\r\n  toSchema() {\r\n    //region Create array for output sequence\r\n    const outputArray = [];\r\n\r\n    outputArray.push(new ObjectIdentifier({ value: this.algorithmId }));\r\n    if (\r\n      \"algorithmParams\" in this &&\r\n      this.algorithmParams instanceof asn1js.Any === false\r\n    )\r\n      outputArray.push(this.algorithmParams);\r\n    //endregion\r\n\r\n    //region Construct and return new ASN.1 schema for this object\r\n    return new Sequence({\r\n      value: outputArray,\r\n    });\r\n    //endregion\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\r\n  toJSON() {\r\n    const object = {\r\n      algorithmId: this.algorithmId,\r\n    };\r\n\r\n    if (\r\n      \"algorithmParams\" in this &&\r\n      this.algorithmParams instanceof asn1js.Any === false\r\n    )\r\n      object.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n    return object;\r\n  }\r\n  //**********************************************************************************\r\n  /**\r\n   * Check that two \"AlgorithmIdentifiers\" are equal\r\n   * @param {AlgorithmIdentifier} algorithmIdentifier\r\n   * @returns {boolean}\r\n   */\r\n  isEqual(algorithmIdentifier) {\r\n    //region Check input type\r\n    if (algorithmIdentifier instanceof AlgorithmIdentifier === false)\r\n      return false;\r\n    //endregion\r\n\r\n    //region Check \"algorithm_id\"\r\n    if (this.algorithmId !== algorithmIdentifier.algorithmId) return false;\r\n    //endregion\r\n\r\n    //region Check \"algorithm_params\"\r\n    if (\"algorithmParams\" in this) {\r\n      if (\"algorithmParams\" in algorithmIdentifier)\r\n        return (\r\n          JSON.stringify(this.algorithmParams) ===\r\n          JSON.stringify(algorithmIdentifier.algorithmParams)\r\n        );\r\n\r\n      return false;\r\n    }\r\n\r\n    if (\"algorithmParams\" in algorithmIdentifier) return false;\r\n    //endregion\r\n\r\n    return true;\r\n  }\r\n  //**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"sourceRoot":""}